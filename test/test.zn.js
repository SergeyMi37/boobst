// Generated by CoffeeScript 1.6.3
/*
* @author Andrew D.Laptev <a.d.laptev@gmail.com>
*/


/*global describe, beforeEach, afterEach, it*/


(function() {
  var BoobstSocket, GLOBAL, NAMESPACES, assert, boobst;

  assert = require('assert');

  boobst = require('../boobst');

  BoobstSocket = boobst.BoobstSocket;

  NAMESPACES = ['%SYS', 'USER'];

  GLOBAL = '^testZN';

  describe('zn', function() {
    var bs;
    bs = new BoobstSocket(require('./test.config'));
    beforeEach(function(done) {
      return bs.connect(function(err) {
        if (err) {
          throw err;
        }
        return done();
      });
    });
    afterEach(function(done) {
      return bs.disconnect(function() {
        return done();
      });
    });
    describe('#zn test simple switching', function() {
      return it('should properly switch between namespaces', function(done) {
        var counter;
        counter = 0;
        return NAMESPACES.forEach(function(ns) {
          counter += 1;
          return bs.zn(ns, function(err, success) {
            assert.equal(err, null);
            assert.equal(success, true);
            assert.equal(ns, bs.ns);
            counter -= 1;
            if (counter === 0) {
              return done();
            }
          });
        });
      });
    });
    return describe('#zn switching with temporary global sets', function() {
      return it('should properly switch between namespaces', function(done) {
        var counter;
        NAMESPACES.forEach(function(ns) {
          bs.zn(ns);
          return bs.set(GLOBAL, ns);
        });
        counter = 0;
        return NAMESPACES.forEach(function(ns) {
          counter += 1;
          return bs.zn(ns, function(err, success) {
            assert.equal(err, null);
            assert.equal(success, true);
            assert.equal(ns, bs.ns);
            return bs.get(GLOBAL, function(err, data) {
              assert.equal(err, null);
              assert.equal(data, bs.ns);
              counter -= 1;
              if (counter === 0) {
                counter = 0;
                return NAMESPACES.forEach(function(ns) {
                  counter += 1;
                  bs.zn(ns);
                  return bs.kill(GLOBAL, function(err) {
                    assert.equal(err, null);
                    counter -= 1;
                    if (counter === 0) {
                      return done();
                    }
                  });
                });
              }
            });
          });
        });
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=test.zn.map
*/
