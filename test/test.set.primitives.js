// Generated by CoffeeScript 1.7.1
(function() {
  var BoobstSocket, GLOBAL, assert, boobst;

  assert = require('assert');

  boobst = require('../boobst');

  BoobstSocket = boobst.BoobstSocket;

  GLOBAL = '^testObject';

  describe('set.primitives', function() {
    var bs;
    this.timeout(1000);
    bs = new BoobstSocket(require('./test.config'));
    beforeEach(function(done) {
      return bs.connect(function(err) {
        if (err) {
          throw err;
        }
        return done();
      });
    });
    afterEach(function(done) {
      return bs.kill(GLOBAL, function(err) {
        if (err) {
          throw err;
        }
        return bs.disconnect(function() {
          return done();
        });
      });
    });
    describe('#set number', function() {
      return it('should save numbers', function(done) {
        var value;
        value = 5;
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(value, data);
          return done();
        });
      });
    });
    describe('#set date', function() {
      return it('should save dates', function(done) {
        var value;
        value = new Date();
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(value.toString(), new Date(data).toString());
          return done();
        });
      });
    });
    describe('#set string', function() {
      return it('should save strings', function(done) {
        var value;
        value = 'string';
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(value, data);
          return done();
        });
      });
    });
    describe('#set boolean', function() {
      it('should save true value', function(done) {
        return bs.set(GLOBAL, true).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(data, '1true');
          return done();
        });
      });
      return it('should save false value', function(done) {
        return bs.set(GLOBAL, false).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(data, '0false');
          return done();
        });
      });
    });
    describe('#set array', function() {
      return it('should save array as an object', function(done) {
        var value;
        value = [1, 2, 3];
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.deepEqual(JSON.parse(data.toString()), value);
          return done();
        });
      });
    });
    return describe('#set object', function() {
      return it('should save all nested values properly', function(done) {
        var value;
        value = {
          number: 42,
          boolean: true,
          string: 'string',
          nested: {
            a: 1,
            b: 'a',
            c: true
          },
          array: [
            1, 2, 3, {
              a: 1,
              b: '2'
            }
          ]
        };
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.deepEqual(JSON.parse(data.toString()), value);
          return done();
        });
      });
    });

    /*
    describe '#set', () ->
      it 'shouldn\'t save function', (done) ->
        value = () ->
        bs.set GLOBAL, value
          .get GLOBAL, (err, data) ->
            assert.equal err, null
            assert.equal undefined, data
            done()
     */
  });

}).call(this);

//# sourceMappingURL=test.set.primitives.map
