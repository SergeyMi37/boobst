// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var BoobstSocket, GLOBAL, assert, boobst;

  assert = require('assert');

  boobst = require('../boobst');

  BoobstSocket = boobst.BoobstSocket;

  GLOBAL = '^testObject';

  describe('set', function() {
    var bs;
    this.timeout(1000);
    bs = new BoobstSocket(require('./test.config'));
    beforeEach(function(done) {
      return bs.connect(function(err) {
        if (err) {
          throw err;
        }
        return done();
      });
    });
    afterEach(function(done) {
      return bs.kill(GLOBAL, function(err) {
        if (err) {
          throw err;
        }
        return bs.disconnect(function() {
          return done();
        });
      });
    });
    describe('set primitives', function() {
      it('should save numbers', function(done) {
        var value;
        value = 5;
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(value, data);
          return done();
        });
      });
      it('should save dates', function(done) {
        var value;
        value = new Date();
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(value.toString(), new Date(data).toString());
          return done();
        });
      });
      it('should save strings', function(done) {
        var value;
        value = 'string';
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(value, data);
          return done();
        });
      });
      it('should save true boolean value', function(done) {
        return bs.set(GLOBAL, true).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(data, '1true');
          return done();
        });
      });
      it('should save false boolean value', function(done) {
        return bs.set(GLOBAL, false).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(data, '0false');
          return done();
        });
      });
      it('souldn\'t save null', function(done) {
        return bs.set(GLOBAL, null).get(GLOBAL, function(err, data) {
          assert.notEqual(err, null);
          return done();
        });
      });
      return it('souldn\'t save undefined', function(done) {
        return bs.set(GLOBAL, void 0).get(GLOBAL, function(err) {
          assert.notEqual(err, null);
          return done();
        });
      });
    });
    describe('set complex structures', function() {
      it('should save array as an object', function(done) {
        var value;
        value = [1, 2, 3];
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.deepEqual(JSON.parse(data.toString()), value);
          return done();
        });
      });
      return it('should save all nested values properly', function(done) {
        var value;
        value = {
          number: 42,
          boolean: true,
          string: 'string',
          nested: {
            a: 1,
            b: 'a',
            c: true
          },
          array: [
            1, 2, 3, {
              a: 1,
              b: '2'
            }
          ]
        };
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.deepEqual(JSON.parse(data.toString()), value);
          return done();
        });
      });
    });
    describe('inline/callback set-get chaining', function() {
      var value;
      value = 'VALUE';
      it('should set a global without subscripts inline and then get it', function(done) {
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(value, data);
          return done();
        });
      });
      it('should set a global without subscripts with a callback and then get it', function(done) {
        return bs.set(GLOBAL, value, function(err) {
          assert.equal(err, null);
          return bs.get(GLOBAL, function(err, data) {
            assert.equal(err, null);
            assert.equal(value, data);
            return done();
          });
        });
      });
      it('should set a global with subscripts inline and then get it', function(done) {
        return bs.set(GLOBAL, ['a', 1], value).get(GLOBAL, ['a', 1], function(err, data) {
          assert.equal(err, null);
          assert.equal(value, data);
          return done();
        });
      });
      return it('should set a global with subscripts with a callback and then get it', function(done) {
        return bs.set(GLOBAL, ['a', 1], value, function(err) {
          assert.equal(err, null);
          return bs.get(GLOBAL, ['a', 1], function(err, data) {
            assert.equal(err, null);
            assert.equal(value, data);
            return done();
          });
        });
      });
    });
    return describe('different arguments in `set` method', function() {
      var array, value;
      value = 'VALUE';
      array = ['a', 1];
      it('works with two-arguments form', function(done) {
        return bs.set(GLOBAL, value).get(GLOBAL, function(err, data) {
          assert.equal(err, null);
          assert.equal(value, data);
          return done();
        });
      });
      it('works with three-arguments form without callback', function(done) {
        return bs.set(GLOBAL, array, value).get(GLOBAL, array, function(err, data) {
          assert.equal(err, null);
          assert.equal(value, data);
          return done();
        });
      });
      it('works with three-arguments form without callback even the value is array', function(done) {
        return bs.set(GLOBAL, array, array).get(GLOBAL, array, function(err, data) {
          assert.equal(err, null);
          assert.deepEqual(array, JSON.parse(data.toString()));
          return done();
        });
      });
      it('works with three-arguments form with callback even the value is array', function(done) {
        return bs.set(GLOBAL, array, function(err) {
          assert.equal(err, null);
          return bs.get(GLOBAL, function(err, data) {
            console.log(err);
            assert.equal(err, null);
            assert.deepEqual(array, JSON.parse(data.toString()));
            return done();
          });
        });
      });
      return it('works with four-arguments form with callback even the value is array', function(done) {
        return bs.set(GLOBAL, array, array, function(err) {
          assert.equal(err, null);
          return bs.get(GLOBAL, array, function(err, data) {
            assert.equal(err, null);
            assert.deepEqual(array, JSON.parse(data.toString()));
            return done();
          });
        });
      });
    });

    /*
    describe '#set', () ->
      it 'shouldn\'t save function', (done) ->
        value = () ->
        bs.set GLOBAL, value
          .get GLOBAL, (err, data) ->
            assert.equal err, null
            assert.equal undefined, data
            done()
     */
  });

}).call(this);

//# sourceMappingURL=test.set.map
